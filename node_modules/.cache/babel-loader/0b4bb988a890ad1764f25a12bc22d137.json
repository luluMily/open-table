{"ast":null,"code":"var _jsxFileName = \"/Users/luluMily/project/open-table/src/components/RestaurantContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { searchRestaurants } from '../actions/index';\nimport { bindActionCreators } from 'redux';\nimport RestaurantItem from './RestaurantItem';\nimport SearchBar from './SearchBar';\nimport FilterBar from './FilterBar';\nimport openTable from '../apis/openTable';\n\nclass RestaurantContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFormSubmit = async city => {\n      if (!city) {\n        alert('Please enter a city');\n        return;\n      }\n\n      this.setState({\n        city: city\n      });\n      await fetch(\"https://opentable.herokuapp.com/api/restaurants?city=\".concat(city)).then(res => res.json()).then(result => {\n        this.setState({\n          restaurants: result.restaurants\n        });\n\n        if (this.state.fitler) {\n          this.onFilterFormSubmit(this.state.fitler);\n        }\n      });\n    };\n\n    this.onFilterFormSubmit = filter => {\n      debugger;\n      this.setState({\n        fitler: filter\n      });\n\n      if (!filter) {\n        this.onFormSubmit(this.state.city);\n      }\n\n      let filterString = filter.toLowerCase();\n      const restaurantsFilterList = this.state.restaurants.filter(restaurant => {\n        return restaurant.name.toLowerCase().includes(filterString) || restaurant.address.toLowerCase().includes(filterString) || restaurant.area.toLowerCase().includes(filterString);\n      });\n      this.setState({\n        restaurants: restaurantsFilterList\n      });\n    };\n\n    this.state = {\n      restaurants: [],\n      city: '',\n      fitler: ''\n    };\n  }\n\n  render() {\n    const restaurantsList = [];\n    this.state.restaurants.forEach(restaurant => {\n      restaurantsList.push(React.createElement(RestaurantItem, {\n        key: restaurant.id,\n        restaurant: restaurant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"restaurant-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      onFormSubmit: this.onFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(FilterBar, {\n      onFilterFormSubmit: this.onFilterFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"total\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Total \", this.state.restaurants.length, \" are restaurants available.\")), React.createElement(\"ul\", {\n      className: \"list-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, restaurantsList));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  // whatever is retured will show up as props inside of BookList\n  return {\n    restaurants: state.restaurants\n  };\n} // anything returned from this function will end up as props\n// on the BookList container\n\n\nfunction mapDispatchToProps(dispatch) {\n  // whenever selectBook is called, the result should be passed\n  // to all of our reducers\n  return bindActionCreators({\n    searchRestaurants: searchRestaurants\n  }, dispatch);\n} // promote BookList from a component to a container - it needs to know\n// about this new dispatch methos, selectBook. Make it available\n// as a prop\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RestaurantContainer);","map":{"version":3,"sources":["/Users/luluMily/project/open-table/src/components/RestaurantContainer.js"],"names":["React","connect","searchRestaurants","bindActionCreators","RestaurantItem","SearchBar","FilterBar","openTable","RestaurantContainer","Component","constructor","props","onFormSubmit","city","alert","setState","fetch","then","res","json","result","restaurants","state","fitler","onFilterFormSubmit","filter","filterString","toLowerCase","restaurantsFilterList","restaurant","name","includes","address","area","render","restaurantsList","forEach","push","id","length","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { searchRestaurants } from '../actions/index';\nimport { bindActionCreators } from 'redux';\nimport RestaurantItem from './RestaurantItem';\nimport SearchBar from './SearchBar';\nimport FilterBar from './FilterBar';\nimport openTable from '../apis/openTable';\n\nclass RestaurantContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            restaurants: [],\n            city: '',\n            fitler: ''\n        }\n    }\n    \n    onFormSubmit = async city => { \n        if (!city) {\n            alert('Please enter a city');\n            return;\n        }\n\n        this.setState({city: city});\n\n        await fetch(`https://opentable.herokuapp.com/api/restaurants?city=${city}`)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({ restaurants: result.restaurants });\n\n                if(this.state.fitler) {\n                    this.onFilterFormSubmit(this.state.fitler);\n                }\n            }\n        )\n    }\n\n    onFilterFormSubmit = filter => {\n        debugger\n        this.setState({ fitler: filter});\n\n        if(!filter) {\n            this.onFormSubmit(this.state.city)\n        }\n\n        let filterString = filter.toLowerCase();\n\n        const restaurantsFilterList = this.state.restaurants.filter( restaurant => {\n            return restaurant.name.toLowerCase().includes(filterString) \n            || restaurant.address.toLowerCase().includes(filterString)\n            || restaurant.area.toLowerCase().includes(filterString)\n        })\n\n        this.setState({\n            restaurants: restaurantsFilterList\n        })\n    }\n\n    render() {\n        const restaurantsList = [];\n\n        this.state.restaurants.forEach(restaurant => {\n            restaurantsList.push(\n                <RestaurantItem key={restaurant.id} restaurant={restaurant}/>\n            )\n        })\n\n        return (\n            <div className=\"restaurant-container\">\n                <div className=\"header\">\n                    <SearchBar \n                        onFormSubmit={this.onFormSubmit} />\n                    <FilterBar \n                        onFilterFormSubmit={this.onFilterFormSubmit} />\n                    <span className=\"total\">Total {this.state.restaurants.length} are restaurants available.</span>\n                </div>\n                <ul className=\"list-container\">{restaurantsList}</ul>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    // whatever is retured will show up as props inside of BookList\n    return {\n        restaurants: state.restaurants\n    };\n}\n\n// anything returned from this function will end up as props\n// on the BookList container\nfunction mapDispatchToProps(dispatch) {\n    // whenever selectBook is called, the result should be passed\n    // to all of our reducers\n    return bindActionCreators({ searchRestaurants: searchRestaurants }, dispatch);\n}\n\n// promote BookList from a component to a container - it needs to know\n// about this new dispatch methos, selectBook. Make it available\n// as a prop\nexport default connect(mapStateToProps, mapDispatchToProps)(RestaurantContainer);\n"]},"metadata":{},"sourceType":"module"}